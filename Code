import tkinter as tk
from tkinter import filedialog, messagebox
import numpy as np

# Vigen√®re Cipher implementation
def vigenere_encrypt(plaintext, key):
    key = key.upper()
    key_len = len(key)
    plaintext = plaintext.upper()
    ciphertext = ''
    
    for i, char in enumerate(plaintext):
        if char.isalpha():
            shift = ord(key[i % key_len]) - 65
            encrypted_char = chr(((ord(char) - 65 + shift) % 26) + 65)
            ciphertext += encrypted_char
        else:
            ciphertext += char
    
    return ciphertext

def vigenere_decrypt(ciphertext, key):
    key = key.upper()
    key_len = len(key)
    ciphertext = ciphertext.upper()
    plaintext = ''
    
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            shift = ord(key[i % key_len]) - 65
            decrypted_char = chr(((ord(char) - 65 - shift + 26) % 26) + 65)
            plaintext += decrypted_char
        else:
            plaintext += char
    
    return plaintext

# Hill Cipher implementation (Matrix 2x2)
def hill_encrypt(plaintext, key):
    key_matrix = np.array(key).reshape(2, 2)
    plaintext = plaintext.upper()
    ciphertext_matrix = []
    
    for i in range(0, len(plaintext), 2):
        if i + 1 < len(plaintext):  # Check if there is a pair
            pair = [ord(plaintext[i]) - 65, ord(plaintext[i + 1]) - 65]
        else:
            pair = [ord(plaintext[i]) - 65, ord('X') - 65]  # Pad with 'X' if odd length
        
        result_vector = np.dot(key_matrix, pair) % 26
        ciphertext_pair = ''.join([chr(num + 65) for num in result_vector])
        ciphertext_matrix.append(ciphertext_pair)
    
    return ''.join(ciphertext_matrix)

def hill_decrypt(ciphertext, key):
    key_matrix = np.array(key).reshape(2, 2)
    det = int(np.round(np.linalg.det(key_matrix))) % 26
    det_inv = pow(det, -1, 26)  # Modular inverse of determinant

    # Calculate the inverse matrix using adjugate method
    adjugate_matrix = np.round(det_inv * np.linalg.inv(key_matrix)).astype(int) % 26

    plaintext_matrix = []
    
    for i in range(0, len(ciphertext), 2):
        if i + 1 < len(ciphertext):  
            pair = [ord(ciphertext[i]) - 65, ord(ciphertext[i + 1]) - 65]
        else:
            pair = [ord(ciphertext[i]) - 65, ord('X') - 65]  
        
        result_vector = np.dot(adjugate_matrix, pair) % 26
        plaintext_pair = ''.join([chr(int(num) + 65) for num in result_vector])
        plaintext_matrix.append(plaintext_pair)

    return ''.join(plaintext_matrix)

# Playfair Cipher implementation
def generate_playfair_matrix(key):
    matrix = []
    alphabet = 'ABCDEFGHIKLMNOPQRSTUVWXYZ'
    used = set()
    
    for char in key.upper():
        if char not in used and char != 'J':
            matrix.append(char)
            used.add(char)
    
    for char in alphabet:
        if char not in used:
            matrix.append(char)
    
    return [matrix[i:i + 5] for i in range(0, len(matrix), 5)]

def playfair_encrypt(plaintext, key):
    plaintext = plaintext.upper().replace('J', 'I')
    matrix = generate_playfair_matrix(key)
    ciphertext = ''
    
    def find_position(char):
        for row in range(5):
            for col in range(5):
                if matrix[row][col] == char:
                    return row, col
    
    for i in range(0, len(plaintext), 2):
        if i + 1 >= len(plaintext):  
            pair = (plaintext[i], 'X')  
        else:
            pair = (plaintext[i], plaintext[i + 1])
        
        row1, col1 = find_position(pair[0])
        row2, col2 = find_position(pair[1])
        
        if row1 == row2:
            ciphertext += matrix[row1][(col1 + 1) % 5]
            ciphertext += matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:
            ciphertext += matrix[(row1 + 1) % 5][col1]
            ciphertext += matrix[(row2 + 1) % 5][col2]
        else:
            ciphertext += matrix[row1][col2]
            ciphertext += matrix[row2][col1]
    
    return ciphertext

def playfair_decrypt(ciphertext, key):
    matrix = generate_playfair_matrix(key)
    plaintext = ''
    
    def find_position(char):
        for row in range(5):
            for col in range(5):
                if matrix[row][col] == char:
                    return row, col
    
    for i in range(0, len(ciphertext), 2):
        pair = (ciphertext[i], ciphertext[i + 1])
        
        row1, col1 = find_position(pair[0])
        row2, col2 = find_position(pair[1])
        
        if row1 == row2:
            plaintext += matrix[row1][(col1 - 1) % 5]
            plaintext += matrix[row2][(col2 - 1) % 5]
        elif col1 == col2:
            plaintext += matrix[(row1 - 1) % 5][col1]
            plaintext += matrix[(row2 - 1) % 5][col2]
        else:
            plaintext += matrix[row1][col2]
            plaintext += matrix[row2][col1]
    
    return plaintext

# GUI functions
def open_file():
    file_path = filedialog.askopenfilename(filetypes=[('Text Files', '*.txt')])
    if file_path:
        with open(file_path, 'r') as file:
            content = file.read()
        input_text.set(content)

def encrypt():
    text = input_text.get()
    key = key_input.get()
    
    if len(key) < 12:
        messagebox.showerror('Error', 'Kunci minimal harus terdiri dari minimal dua belas karakter.')
        return
    
    method = cipher_var.get()

    try:
        if method == 'Vigenere':
            output_text.set(vigenere_encrypt(text.replace(" ", ""), key))
        elif method == 'Hill':
            if len(key) < 4:
                messagebox.showerror('Error', 'Kunci untuk Hill Cipher harus terdiri dari minimal empat karakter.')
                return
            
            key_matrix = [ord(k) - ord('A') for k in key[:4]]  
            
            output_text.set(hill_encrypt(text.replace(" ", ""), key_matrix))
        elif method == 'Playfair':
            output_text.set(playfair_encrypt(text.replace(" ", ""), key))
        
        # Clear input text after processing
        input_text.set('')

    except Exception as e:
        messagebox.showerror('Error', f'An error occurred: {e}')

def decrypt():
    text = input_text.get()
    key = key_input.get()
    
    if len(key) < 12:
        messagebox.showerror('Error', 'Kunci minimal harus terdiri dari minimal dua belas karakter.')
        return
    
    method = cipher_var.get()

    try:
        if method == 'Vigenere':
            output_text.set(vigenere_decrypt(text.replace(" ", ""), key))
        elif method == 'Hill':
            if len(key) < 4:
                messagebox.showerror('Error', 'Kunci untuk Hill Cipher harus terdiri dari minimal empat karakter.')
                return
            
            key_matrix = [ord(k) - ord('A') for k in key[:4]]  
            
            output_text.set(hill_decrypt(text.replace(" ", ""), key_matrix))
        elif method == 'Playfair':
            output_text.set(playfair_decrypt(text.replace(" ", ""), key))
        
        # Clear input text after processing
        input_text.set('')

    except Exception as e:
        messagebox.showerror('Error', f'An error occurred: {e}')

# Initialize GUI
root = tk.Tk()
root.title('Cipher Program')
root.geometry('600x400')

input_text = tk.StringVar()
output_text = tk.StringVar()
key_input = tk.StringVar()
cipher_var = tk.StringVar(value='Vigenere')

tk.Label(root, text='Input Text').pack(pady=10)
tk.Entry(root, textvariable=input_text, width=50).pack()

tk.Label(root, text='Key (min.12 characters)').pack(pady=10)
tk.Entry(root, textvariable=key_input, width=50).pack()

tk.Label(root, text='Cipher Method').pack(pady=10)
tk.OptionMenu(root, cipher_var, 'Vigenere', 'Hill', 'Playfair').pack()

tk.Button(root, text='Open File', command=open_file).pack(pady=10)
tk.Button(root, text='Encrypt', command=encrypt).pack(pady=10)
tk.Button(root, text='Decrypt', command=decrypt).pack(pady=10)

tk.Label(root, text='Output Text').pack(pady=10)
tk.Entry(root, textvariable=output_text, width=50).pack()

# Start the main event loop
root.mainloop()
